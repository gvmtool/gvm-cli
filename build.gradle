import org.apache.tools.ant.filters.ReplaceTokens

import static org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL

plugins {
	id('groovy')
}

String userHome = System.getProperty('user.home')
ext.installBinDir = "${userHome}/.sdkman/bin"
ext.installSrcDir = "${userHome}/.sdkman/src"
ext.installContribDir = "${userHome}/.sdkman/contrib"

ext.environment = hasProperty('env') ? env : 'local'
ext.hash = hasProperty('hash') ? hash : 'hashme'
ext.release = hasProperty('release') ? release : 'latest'

if ("$environment" == 'stable') {
	ext.candidatesApi = 'https://api.sdkman.io/2'
} else if ("$environment" == 'beta') {
	ext.candidatesApi = 'https://beta.sdkman.io/2'
} else {
	ext.candidatesApi = 'http://localhost:8080/2'
}

ext.sdkmanVersion = ext.release == 'latest' ? "latest+${ext.hash}".toString() : ext.release

println("Environment is set to: $environment")
println("Short git hash: $hash")
println("Release set to: $release")
println("Candidtes API: $candidatesApi")
println("Version: $sdkmanVersion")

repositories {
	mavenCentral()
}

dependencies {
	testImplementation('com.github.tomakehurst:wiremock:2.27.2') {
		exclude module: 'junit'
	}
	testImplementation('io.cucumber:cucumber-groovy:4.7.1')
	testImplementation('io.cucumber:cucumber-junit:4.7.4')
	testImplementation('io.cucumber:gherkin:5.2.0')
	testImplementation('junit:junit:4.13.2')
	testImplementation('org.codehaus.groovy:groovy:2.4.21')
	testImplementation('org.codehaus.groovy:groovy-json:2.4.21')
	testImplementation('org.codehaus.groovy:groovy-templates:2.4.21')
	testImplementation('org.slf4j:slf4j-api:1.7.32')
	testImplementation('org.slf4j:slf4j-simple:1.7.32')
	testImplementation('org.spockframework:spock-core:1.3-groovy-2.4') {
		exclude module: 'groovy-all'
	}
}

task prepareScripts(type: Copy) {
	from('src/main/bash')
	into('build/scripts')
	include('**/*')
	filter(
			ReplaceTokens,
			tokens: [
					SDKMAN_VERSION       : sdkmanVersion,
					SDKMAN_CANDIDATES_API: candidatesApi
			]
	)
}

task prepareContrib(type: Copy) {
	from('contrib')
	into('build/contrib')
}

tasks.test.configure {
	dependsOn(prepareScripts)
	testLogging.exceptionFormat = FULL
}

task assembleArchive(type: Zip, dependsOn: [prepareScripts, prepareContrib]) {
	archiveVersion = sdkmanVersion
	from('build/scripts') {
		include('*.sh*')
	}
	from('build') {
		include('contrib/**')
	}
}

tasks.assemble.configure {
	dependsOn(assembleArchive)
}

task cleanInstallInit(type: Delete) {
	delete(installBinDir)
}

task cleanContribInit(type: Delete) {
	delete(installContribDir)
}

task cleanInstallModules(type: Delete) {
	delete(installSrcDir)
}

task installContrib(type: Copy, dependsOn: [cleanContribInit, prepareContrib]) {
	from('build/contrib')
	into(installContribDir)
}

task installInit(type: Copy, dependsOn: [cleanInstallInit, prepareScripts]) {
	from('build/scripts')
	into(installBinDir)
	include('sdkman-init.sh')
}

task installModules(type: Copy, dependsOn: [cleanInstallModules, prepareScripts]) {
	from('build/scripts')
	into(installSrcDir)
	include('sdkman-*.sh')
	exclude('sdkman-init.sh')
}

task install(dependsOn: [installInit, installContrib, installModules])
